import React, { useState, useEffect } from 'react';
import {
    Box,
    Typography,
    Card,
    CardContent,
    Grid,
    Button,
    TextField,
    Switch,
    FormControlLabel,
    Divider,
    Alert,
    Snackbar,
    Tabs,
    Tab,
    Select,
    MenuItem,
    FormControl,
    InputLabel,
    IconButton,
    Stack,
    Chip,
    Dialog,
    DialogTitle,
    DialogContent,
    DialogActions
} from '@mui/material';
import {
    Settings as SettingsIcon,
    Save as SaveIcon,
    Refresh as RefreshIcon,
    Security as SecurityIcon,
    Notifications as NotificationsIcon,
    Payment as PaymentIcon,
    DirectionsCar as VehicleIcon,
    Schedule as ScheduleIcon,
    Email as EmailIcon,
    Edit as EditIcon,
    Delete as DeleteIcon,
    Add as AddIcon
} from '@mui/icons-material';

const Settings = () => {
    const [activeTab, setActiveTab] = useState(0);
    const [message, setMessage] = useState('');
    const [error, setError] = useState('');
    const [loading, setLoading] = useState(false);

    // General Settings
    const [generalSettings, setGeneralSettings] = useState({
        systemName: 'EV Share Platform',
        systemEmail: 'support@evshare.com',
        systemPhone: '1900-xxxx',
        address: '123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM',
        maintenanceMode: false,
        registrationEnabled: true,
        emailVerificationRequired: true,
        phoneVerificationRequired: false,
        autoApproveVehicles: false,
        maxVehiclesPerUser: 5,
        minBookingHours: 2,
        maxBookingDays: 30,
        cancellationDeadlineHours: 24
    });

    // Notification Settings
    const [notificationSettings, setNotificationSettings] = useState({
        emailNotificationsEnabled: true,
        smsNotificationsEnabled: false,
        pushNotificationsEnabled: true,
        bookingConfirmation: true,
        bookingReminder: true,
        paymentConfirmation: true,
        maintenanceReminder: true,
        systemAnnouncements: true,
        marketingEmails: false,
        reminderBeforeHours: 24
    });

    // Payment Settings
    const [paymentSettings, setPaymentSettings] = useState({
        currency: 'VND',
        taxRate: 10,
        serviceFee: 5,
        lateFeePerDay: 50000,
        depositPercentage: 20,
        refundProcessingDays: 7,
        acceptedPaymentMethods: ['card', 'bank_transfer', 'e_wallet'],
        autoRefundEnabled: true
    });

    // Security Settings
    const [securitySettings, setSecuritySettings] = useState({
        sessionTimeout: 60,
        passwordMinLength: 8,
        passwordRequireUppercase: true,
        passwordRequireNumbers: true,
        passwordRequireSpecialChars: true,
        maxLoginAttempts: 5,
        lockoutDuration: 30,
        twoFactorEnabled: false,
        ipWhitelistEnabled: false,
        allowedIPs: []
    });

    // Email Templates
    const [emailTemplates, setEmailTemplates] = useState([
        { id: 1, name: 'X√°c nh·∫≠n ƒëƒÉng k√Ω', subject: 'Ch√†o m·ª´ng ƒë·∫øn v·ªõi EV Share', type: 'registration' },
        { id: 2, name: 'X√°c nh·∫≠n booking', subject: 'ƒê·∫∑t xe th√†nh c√¥ng', type: 'booking' },
        { id: 3, name: 'Nh·∫Øc nh·ªü thanh to√°n', subject: 'Nh·∫Øc nh·ªü thanh to√°n', type: 'payment' },
        { id: 4, name: 'X√°c nh·∫≠n h·ªßy', subject: 'X√°c nh·∫≠n h·ªßy ƒë·∫∑t xe', type: 'cancellation' }
    ]);

    const [editTemplateDialog, setEditTemplateDialog] = useState({ open: false, template: null });

    useEffect(() => {
        loadSettings();
    }, []);

    const loadSettings = async () => {
        try {
            setLoading(true);
            // API calls to load settings would go here
            // Mock data is already set in state
            console.log('‚úÖ Settings loaded successfully');
        } catch (err) {
            console.error('‚ùå Error loading settings:', err);
        } finally {
            setLoading(false);
        }
    };

    const handleSaveSettings = async () => {
        try {
            setLoading(true);
            setError('');
            
            // Save settings based on active tab
            let settingsData = {};
            switch (activeTab) {
                case 0:
                    settingsData = generalSettings;
                    break;
                case 1:
                    settingsData = notificationSettings;
                    break;
                case 2:
                    settingsData = paymentSettings;
                    break;
                case 3:
                    settingsData = securitySettings;
                    break;
                default:
                    break;
            }

            // API call would go here
            console.log('üíæ Saving settings:', settingsData);
            
            setMessage('C√†i ƒë·∫∑t ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!');
        } catch (err) {
            setError('L·ªói khi l∆∞u c√†i ƒë·∫∑t: ' + err.message);
        } finally {
            setLoading(false);
        }
    };

    const handleResetSettings = () => {
        if (window.confirm('B·∫°n c√≥ ch·∫Øc mu·ªën kh√¥i ph·ª•c c√†i ƒë·∫∑t m·∫∑c ƒë·ªãnh?')) {
            loadSettings();
            setMessage('ƒê√£ kh√¥i ph·ª•c c√†i ƒë·∫∑t m·∫∑c ƒë·ªãnh');
        }
    };

    return (
        <Box sx={{ p: 3 }}>
            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
                <Typography variant="h4" fontWeight="bold">
                    C√†i ƒë·∫∑t h·ªá th·ªëng
                </Typography>
                <Stack direction="row" spacing={2}>
                    <Button
                        variant="outlined"
                        startIcon={<RefreshIcon />}
                        onClick={handleResetSettings}
                    >
                        Kh√¥i ph·ª•c m·∫∑c ƒë·ªãnh
                    </Button>
                    <Button
                        variant="contained"
                        startIcon={<SaveIcon />}
                        onClick={handleSaveSettings}
                        disabled={loading}
                    >
                        L∆∞u thay ƒë·ªïi
                    </Button>
                </Stack>
            </Box>

            <Tabs value={activeTab} onChange={(e, newValue) => setActiveTab(newValue)} sx={{ mb: 3 }}>
                <Tab icon={<SettingsIcon />} label="C√†i ƒë·∫∑t chung" />
                <Tab icon={<NotificationsIcon />} label="Th√¥ng b√°o" />
                <Tab icon={<PaymentIcon />} label="Thanh to√°n" />
                <Tab icon={<SecurityIcon />} label="B·∫£o m·∫≠t" />
                <Tab icon={<EmailIcon />} label="Email Templates" />
            </Tabs>

            {/* General Settings Tab */}
            {activeTab === 0 && (
                <Grid container spacing={3}>
                    <Grid item xs={12} md={6}>
                        <Card>
                            <CardContent>
                                <Typography variant="h6" gutterBottom>
                                    Th√¥ng tin h·ªá th·ªëng
                                </Typography>
                                <Stack spacing={2}>
                                    <TextField
                                        label="T√™n h·ªá th·ªëng"
                                        value={generalSettings.systemName}
                                        onChange={(e) => setGeneralSettings({ ...generalSettings, systemName: e.target.value })}
                                        fullWidth
                                    />
                                    <TextField
                                        label="Email h·ªó tr·ª£"
                                        type="email"
                                        value={generalSettings.systemEmail}
                                        onChange={(e) => setGeneralSettings({ ...generalSettings, systemEmail: e.target.value })}
                                        fullWidth
                                    />
                                    <TextField
                                        label="S·ªë ƒëi·ªán tho·∫°i"
                                        value={generalSettings.systemPhone}
                                        onChange={(e) => setGeneralSettings({ ...generalSettings, systemPhone: e.target.value })}
                                        fullWidth
                                    />
                                    <TextField
                                        label="ƒê·ªãa ch·ªâ"
                                        value={generalSettings.address}
                                        onChange={(e) => setGeneralSettings({ ...generalSettings, address: e.target.value })}
                                        multiline
                                        rows={2}
                                        fullWidth
                                    />
                                </Stack>
                            </CardContent>
                        </Card>
                    </Grid>

                    <Grid item xs={12} md={6}>
                        <Card>
                            <CardContent>
                                <Typography variant="h6" gutterBottom>
                                    C√†i ƒë·∫∑t ch·ª©c nƒÉng
                                </Typography>
                                <Stack spacing={2}>
                                    <FormControlLabel
                                        control={
                                            <Switch
                                                checked={generalSettings.maintenanceMode}
                                                onChange={(e) => setGeneralSettings({ ...generalSettings, maintenanceMode: e.target.checked })}
                                            />
                                        }
                                        label="Ch·∫ø ƒë·ªô b·∫£o tr√¨"
                                    />
                                    <FormControlLabel
                                        control={
                                            <Switch
                                                checked={generalSettings.registrationEnabled}
                                                onChange={(e) => setGeneralSettings({ ...generalSettings, registrationEnabled: e.target.checked })}
                                            />
                                        }
                                        label="Cho ph√©p ƒëƒÉng k√Ω m·ªõi"
                                    />
                                    <FormControlLabel
                                        control={
                                            <Switch
                                                checked={generalSettings.emailVerificationRequired}
                                                onChange={(e) => setGeneralSettings({ ...generalSettings, emailVerificationRequired: e.target.checked })}
                                            />
                                        }
                                        label="Y√™u c·∫ßu x√°c th·ª±c email"
                                    />
                                    <FormControlLabel
                                        control={
                                            <Switch
                                                checked={generalSettings.autoApproveVehicles}
                                                onChange={(e) => setGeneralSettings({ ...generalSettings, autoApproveVehicles: e.target.checked })}
                                            />
                                        }
                                        label="T·ª± ƒë·ªông duy·ªát xe"
                                    />
                                </Stack>
                            </CardContent>
                        </Card>
                    </Grid>

                    <Grid item xs={12}>
                        <Card>
                            <CardContent>
                                <Typography variant="h6" gutterBottom>
                                    Gi·ªõi h·∫°n & Quy ƒë·ªãnh
                                </Typography>
                                <Grid container spacing={2}>
                                    <Grid item xs={12} sm={6} md={3}>
                                        <TextField
                                            label="S·ªë xe t·ªëi ƒëa/ng∆∞·ªùi d√πng"
                                            type="number"
                                            value={generalSettings.maxVehiclesPerUser}
                                            onChange={(e) => setGeneralSettings({ ...generalSettings, maxVehiclesPerUser: parseInt(e.target.value) })}
                                            fullWidth
                                        />
                                    </Grid>
                                    <Grid item xs={12} sm={6} md={3}>
                                        <TextField
                                            label="Booking t·ªëi thi·ªÉu (gi·ªù)"
                                            type="number"
                                            value={generalSettings.minBookingHours}
                                            onChange={(e) => setGeneralSettings({ ...generalSettings, minBookingHours: parseInt(e.target.value) })}
                                            fullWidth
                                        />
                                    </Grid>
                                    <Grid item xs={12} sm={6} md={3}>
                                        <TextField
                                            label="Booking t·ªëi ƒëa (ng√†y)"
                                            type="number"
                                            value={generalSettings.maxBookingDays}
                                            onChange={(e) => setGeneralSettings({ ...generalSettings, maxBookingDays: parseInt(e.target.value) })}
                                            fullWidth
                                        />
                                    </Grid>
                                    <Grid item xs={12} sm={6} md={3}>
                                        <TextField
                                            label="H·ªßy tr∆∞·ªõc (gi·ªù)"
                                            type="number"
                                            value={generalSettings.cancellationDeadlineHours}
                                            onChange={(e) => setGeneralSettings({ ...generalSettings, cancellationDeadlineHours: parseInt(e.target.value) })}
                                            fullWidth
                                        />
                                    </Grid>
                                </Grid>
                            </CardContent>
                        </Card>
                    </Grid>
                </Grid>
            )}

            {/* Notification Settings Tab */}
            {activeTab === 1 && (
                <Grid container spacing={3}>
                    <Grid item xs={12} md={6}>
                        <Card>
                            <CardContent>
                                <Typography variant="h6" gutterBottom>
                                    K√™nh th√¥ng b√°o
                                </Typography>
                                <Stack spacing={2}>
                                    <FormControlLabel
                                        control={
                                            <Switch
                                                checked={notificationSettings.emailNotificationsEnabled}
                                                onChange={(e) => setNotificationSettings({ ...notificationSettings, emailNotificationsEnabled: e.target.checked })}
                                            />
                                        }
                                        label="Th√¥ng b√°o Email"
                                    />
                                    <FormControlLabel
                                        control={
                                            <Switch
                                                checked={notificationSettings.smsNotificationsEnabled}
                                                onChange={(e) => setNotificationSettings({ ...notificationSettings, smsNotificationsEnabled: e.target.checked })}
                                            />
                                        }
                                        label="Th√¥ng b√°o SMS"
                                    />
                                    <FormControlLabel
                                        control={
                                            <Switch
                                                checked={notificationSettings.pushNotificationsEnabled}
                                                onChange={(e) => setNotificationSettings({ ...notificationSettings, pushNotificationsEnabled: e.target.checked })}
                                            />
                                        }
                                        label="Push Notifications"
                                    />
                                </Stack>
                            </CardContent>
                        </Card>
                    </Grid>

                    <Grid item xs={12} md={6}>
                        <Card>
                            <CardContent>
                                <Typography variant="h6" gutterBottom>
                                    Lo·∫°i th√¥ng b√°o
                                </Typography>
                                <Stack spacing={2}>
                                    <FormControlLabel
                                        control={
                                            <Switch
                                                checked={notificationSettings.bookingConfirmation}
                                                onChange={(e) => setNotificationSettings({ ...notificationSettings, bookingConfirmation: e.target.checked })}
                                            />
                                        }
                                        label="X√°c nh·∫≠n ƒë·∫∑t xe"
                                    />
                                    <FormControlLabel
                                        control={
                                            <Switch
                                                checked={notificationSettings.bookingReminder}
                                                onChange={(e) => setNotificationSettings({ ...notificationSettings, bookingReminder: e.target.checked })}
                                            />
                                        }
                                        label="Nh·∫Øc nh·ªü booking"
                                    />
                                    <FormControlLabel
                                        control={
                                            <Switch
                                                checked={notificationSettings.paymentConfirmation}
                                                onChange={(e) => setNotificationSettings({ ...notificationSettings, paymentConfirmation: e.target.checked })}
                                            />
                                        }
                                        label="X√°c nh·∫≠n thanh to√°n"
                                    />
                                    <FormControlLabel
                                        control={
                                            <Switch
                                                checked={notificationSettings.maintenanceReminder}
                                                onChange={(e) => setNotificationSettings({ ...notificationSettings, maintenanceReminder: e.target.checked })}
                                            />
                                        }
                                        label="Nh·∫Øc b·∫£o tr√¨"
                                    />
                                    <FormControlLabel
                                        control={
                                            <Switch
                                                checked={notificationSettings.systemAnnouncements}
                                                onChange={(e) => setNotificationSettings({ ...notificationSettings, systemAnnouncements: e.target.checked })}
                                            />
                                        }
                                        label="Th√¥ng b√°o h·ªá th·ªëng"
                                    />
                                </Stack>
                            </CardContent>
                        </Card>
                    </Grid>

                    <Grid item xs={12}>
                        <Card>
                            <CardContent>
                                <Typography variant="h6" gutterBottom>
                                    C√†i ƒë·∫∑t nh·∫Øc nh·ªü
                                </Typography>
                                <TextField
                                    label="Nh·∫Øc tr∆∞·ªõc (gi·ªù)"
                                    type="number"
                                    value={notificationSettings.reminderBeforeHours}
                                    onChange={(e) => setNotificationSettings({ ...notificationSettings, reminderBeforeHours: parseInt(e.target.value) })}
                                    sx={{ maxWidth: 200 }}
                                />
                            </CardContent>
                        </Card>
                    </Grid>
                </Grid>
            )}

            {/* Payment Settings Tab */}
            {activeTab === 2 && (
                <Grid container spacing={3}>
                    <Grid item xs={12} md={6}>
                        <Card>
                            <CardContent>
                                <Typography variant="h6" gutterBottom>
                                    C·∫•u h√¨nh thanh to√°n
                                </Typography>
                                <Stack spacing={2}>
                                    <FormControl fullWidth>
                                        <InputLabel>ƒê∆°n v·ªã ti·ªÅn t·ªá</InputLabel>
                                        <Select
                                            value={paymentSettings.currency}
                                            onChange={(e) => setPaymentSettings({ ...paymentSettings, currency: e.target.value })}
                                            label="ƒê∆°n v·ªã ti·ªÅn t·ªá"
                                        >
                                            <MenuItem value="VND">VND - Vi·ªát Nam ƒê·ªìng</MenuItem>
                                            <MenuItem value="USD">USD - US Dollar</MenuItem>
                                        </Select>
                                    </FormControl>
                                    <TextField
                                        label="Thu·∫ø VAT (%)"
                                        type="number"
                                        value={paymentSettings.taxRate}
                                        onChange={(e) => setPaymentSettings({ ...paymentSettings, taxRate: parseFloat(e.target.value) })}
                                        fullWidth
                                    />
                                    <TextField
                                        label="Ph√≠ d·ªãch v·ª• (%)"
                                        type="number"
                                        value={paymentSettings.serviceFee}
                                        onChange={(e) => setPaymentSettings({ ...paymentSettings, serviceFee: parseFloat(e.target.value) })}
                                        fullWidth
                                    />
                                    <TextField
                                        label="Ph√≠ tr·ªÖ h·∫°n (VNƒê/ng√†y)"
                                        type="number"
                                        value={paymentSettings.lateFeePerDay}
                                        onChange={(e) => setPaymentSettings({ ...paymentSettings, lateFeePerDay: parseFloat(e.target.value) })}
                                        fullWidth
                                    />
                                </Stack>
                            </CardContent>
                        </Card>
                    </Grid>

                    <Grid item xs={12} md={6}>
                        <Card>
                            <CardContent>
                                <Typography variant="h6" gutterBottom>
                                    C√†i ƒë·∫∑t ƒë·∫∑t c·ªçc & ho√†n ti·ªÅn
                                </Typography>
                                <Stack spacing={2}>
                                    <TextField
                                        label="ƒê·∫∑t c·ªçc (%)"
                                        type="number"
                                        value={paymentSettings.depositPercentage}
                                        onChange={(e) => setPaymentSettings({ ...paymentSettings, depositPercentage: parseFloat(e.target.value) })}
                                        fullWidth
                                    />
                                    <TextField
                                        label="Th·ªùi gian x·ª≠ l√Ω ho√†n ti·ªÅn (ng√†y)"
                                        type="number"
                                        value={paymentSettings.refundProcessingDays}
                                        onChange={(e) => setPaymentSettings({ ...paymentSettings, refundProcessingDays: parseInt(e.target.value) })}
                                        fullWidth
                                    />
                                    <FormControlLabel
                                        control={
                                            <Switch
                                                checked={paymentSettings.autoRefundEnabled}
                                                onChange={(e) => setPaymentSettings({ ...paymentSettings, autoRefundEnabled: e.target.checked })}
                                            />
                                        }
                                        label="T·ª± ƒë·ªông ho√†n ti·ªÅn"
                                    />
                                </Stack>
                            </CardContent>
                        </Card>
                    </Grid>

                    <Grid item xs={12}>
                        <Card>
                            <CardContent>
                                <Typography variant="h6" gutterBottom>
                                    Ph∆∞∆°ng th·ª©c thanh to√°n
                                </Typography>
                                <Stack direction="row" spacing={1} flexWrap="wrap" useFlexGap>
                                    <Chip
                                        label="Th·∫ª t√≠n d·ª•ng/ghi n·ª£"
                                        color={paymentSettings.acceptedPaymentMethods.includes('card') ? 'primary' : 'default'}
                                        onClick={() => {
                                            const methods = paymentSettings.acceptedPaymentMethods;
                                            if (methods.includes('card')) {
                                                setPaymentSettings({ ...paymentSettings, acceptedPaymentMethods: methods.filter(m => m !== 'card') });
                                            } else {
                                                setPaymentSettings({ ...paymentSettings, acceptedPaymentMethods: [...methods, 'card'] });
                                            }
                                        }}
                                    />
                                    <Chip
                                        label="Chuy·ªÉn kho·∫£n ng√¢n h√†ng"
                                        color={paymentSettings.acceptedPaymentMethods.includes('bank_transfer') ? 'primary' : 'default'}
                                        onClick={() => {
                                            const methods = paymentSettings.acceptedPaymentMethods;
                                            if (methods.includes('bank_transfer')) {
                                                setPaymentSettings({ ...paymentSettings, acceptedPaymentMethods: methods.filter(m => m !== 'bank_transfer') });
                                            } else {
                                                setPaymentSettings({ ...paymentSettings, acceptedPaymentMethods: [...methods, 'bank_transfer'] });
                                            }
                                        }}
                                    />
                                    <Chip
                                        label="V√≠ ƒëi·ªán t·ª≠"
                                        color={paymentSettings.acceptedPaymentMethods.includes('e_wallet') ? 'primary' : 'default'}
                                        onClick={() => {
                                            const methods = paymentSettings.acceptedPaymentMethods;
                                            if (methods.includes('e_wallet')) {
                                                setPaymentSettings({ ...paymentSettings, acceptedPaymentMethods: methods.filter(m => m !== 'e_wallet') });
                                            } else {
                                                setPaymentSettings({ ...paymentSettings, acceptedPaymentMethods: [...methods, 'e_wallet'] });
                                            }
                                        }}
                                    />
                                </Stack>
                            </CardContent>
                        </Card>
                    </Grid>
                </Grid>
            )}

            {/* Security Settings Tab */}
            {activeTab === 3 && (
                <Grid container spacing={3}>
                    <Grid item xs={12} md={6}>
                        <Card>
                            <CardContent>
                                <Typography variant="h6" gutterBottom>
                                    B·∫£o m·∫≠t t√†i kho·∫£n
                                </Typography>
                                <Stack spacing={2}>
                                    <TextField
                                        label="Timeout phi√™n (ph√∫t)"
                                        type="number"
                                        value={securitySettings.sessionTimeout}
                                        onChange={(e) => setSecuritySettings({ ...securitySettings, sessionTimeout: parseInt(e.target.value) })}
                                        fullWidth
                                    />
                                    <TextField
                                        label="ƒê·ªô d√†i m·∫≠t kh·∫©u t·ªëi thi·ªÉu"
                                        type="number"
                                        value={securitySettings.passwordMinLength}
                                        onChange={(e) => setSecuritySettings({ ...securitySettings, passwordMinLength: parseInt(e.target.value) })}
                                        fullWidth
                                    />
                                    <FormControlLabel
                                        control={
                                            <Switch
                                                checked={securitySettings.passwordRequireUppercase}
                                                onChange={(e) => setSecuritySettings({ ...securitySettings, passwordRequireUppercase: e.target.checked })}
                                            />
                                        }
                                        label="Y√™u c·∫ßu ch·ªØ hoa"
                                    />
                                    <FormControlLabel
                                        control={
                                            <Switch
                                                checked={securitySettings.passwordRequireNumbers}
                                                onChange={(e) => setSecuritySettings({ ...securitySettings, passwordRequireNumbers: e.target.checked })}
                                            />
                                        }
                                        label="Y√™u c·∫ßu s·ªë"
                                    />
                                    <FormControlLabel
                                        control={
                                            <Switch
                                                checked={securitySettings.passwordRequireSpecialChars}
                                                onChange={(e) => setSecuritySettings({ ...securitySettings, passwordRequireSpecialChars: e.target.checked })}
                                            />
                                        }
                                        label="Y√™u c·∫ßu k√Ω t·ª± ƒë·∫∑c bi·ªát"
                                    />
                                </Stack>
                            </CardContent>
                        </Card>
                    </Grid>

                    <Grid item xs={12} md={6}>
                        <Card>
                            <CardContent>
                                <Typography variant="h6" gutterBottom>
                                    B·∫£o v·ªá ƒëƒÉng nh·∫≠p
                                </Typography>
                                <Stack spacing={2}>
                                    <TextField
                                        label="S·ªë l·∫ßn ƒëƒÉng nh·∫≠p sai t·ªëi ƒëa"
                                        type="number"
                                        value={securitySettings.maxLoginAttempts}
                                        onChange={(e) => setSecuritySettings({ ...securitySettings, maxLoginAttempts: parseInt(e.target.value) })}
                                        fullWidth
                                    />
                                    <TextField
                                        label="Th·ªùi gian kh√≥a t√†i kho·∫£n (ph√∫t)"
                                        type="number"
                                        value={securitySettings.lockoutDuration}
                                        onChange={(e) => setSecuritySettings({ ...securitySettings, lockoutDuration: parseInt(e.target.value) })}
                                        fullWidth
                                    />
                                    <FormControlLabel
                                        control={
                                            <Switch
                                                checked={securitySettings.twoFactorEnabled}
                                                onChange={(e) => setSecuritySettings({ ...securitySettings, twoFactorEnabled: e.target.checked })}
                                            />
                                        }
                                        label="X√°c th·ª±c 2 y·∫øu t·ªë (2FA)"
                                    />
                                    <FormControlLabel
                                        control={
                                            <Switch
                                                checked={securitySettings.ipWhitelistEnabled}
                                                onChange={(e) => setSecuritySettings({ ...securitySettings, ipWhitelistEnabled: e.target.checked })}
                                            />
                                        }
                                        label="Danh s√°ch IP cho ph√©p"
                                    />
                                </Stack>
                            </CardContent>
                        </Card>
                    </Grid>
                </Grid>
            )}

            {/* Email Templates Tab */}
            {activeTab === 4 && (
                <Grid container spacing={3}>
                    <Grid item xs={12}>
                        <Card>
                            <CardContent>
                                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
                                    <Typography variant="h6">
                                        M·∫´u email t·ª± ƒë·ªông
                                    </Typography>
                                    <Button
                                        variant="contained"
                                        startIcon={<AddIcon />}
                                        onClick={() => setEditTemplateDialog({ open: true, template: null })}
                                    >
                                        Th√™m m·∫´u m·ªõi
                                    </Button>
                                </Box>
                                <Stack spacing={2}>
                                    {emailTemplates.map((template) => (
                                        <Card key={template.id} variant="outlined">
                                            <CardContent>
                                                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                                                    <Box>
                                                        <Typography variant="subtitle1" fontWeight="bold">
                                                            {template.name}
                                                        </Typography>
                                                        <Typography variant="body2" color="text.secondary">
                                                            Ti√™u ƒë·ªÅ: {template.subject}
                                                        </Typography>
                                                        <Chip label={template.type} size="small" sx={{ mt: 1 }} />
                                                    </Box>
                                                    <Stack direction="row" spacing={1}>
                                                        <IconButton
                                                            size="small"
                                                            onClick={() => setEditTemplateDialog({ open: true, template })}
                                                        >
                                                            <EditIcon />
                                                        </IconButton>
                                                        <IconButton size="small" color="error">
                                                            <DeleteIcon />
                                                        </IconButton>
                                                    </Stack>
                                                </Box>
                                            </CardContent>
                                        </Card>
                                    ))}
                                </Stack>
                            </CardContent>
                        </Card>
                    </Grid>
                </Grid>
            )}

            {/* Notifications */}
            <Snackbar open={!!message} autoHideDuration={4000} onClose={() => setMessage('')}>
                <Alert severity="success" onClose={() => setMessage('')}>{message}</Alert>
            </Snackbar>
            <Snackbar open={!!error} autoHideDuration={6000} onClose={() => setError('')}>
                <Alert severity="error" onClose={() => setError('')}>{error}</Alert>
            </Snackbar>

            {/* Edit Template Dialog */}
            <Dialog
                open={editTemplateDialog.open}
                onClose={() => setEditTemplateDialog({ open: false, template: null })}
                maxWidth="md"
                fullWidth
            >
                <DialogTitle>
                    {editTemplateDialog.template ? 'Ch·ªânh s·ª≠a m·∫´u email' : 'Th√™m m·∫´u email m·ªõi'}
                </DialogTitle>
                <DialogContent>
                    <Stack spacing={2} sx={{ mt: 1 }}>
                        <TextField
                            label="T√™n m·∫´u"
                            defaultValue={editTemplateDialog.template?.name || ''}
                            fullWidth
                        />
                        <TextField
                            label="Ti√™u ƒë·ªÅ email"
                            defaultValue={editTemplateDialog.template?.subject || ''}
                            fullWidth
                        />
                        <FormControl fullWidth>
                            <InputLabel>Lo·∫°i m·∫´u</InputLabel>
                            <Select
                                defaultValue={editTemplateDialog.template?.type || ''}
                                label="Lo·∫°i m·∫´u"
                            >
                                <MenuItem value="registration">ƒêƒÉng k√Ω</MenuItem>
                                <MenuItem value="booking">Booking</MenuItem>
                                <MenuItem value="payment">Thanh to√°n</MenuItem>
                                <MenuItem value="cancellation">H·ªßy ƒë·∫∑t xe</MenuItem>
                                <MenuItem value="maintenance">B·∫£o tr√¨</MenuItem>
                            </Select>
                        </FormControl>
                        <TextField
                            label="N·ªôi dung email"
                            multiline
                            rows={10}
                            fullWidth
                            placeholder="Nh·∫≠p n·ªôi dung email (h·ªó tr·ª£ HTML)..."
                        />
                    </Stack>
                </DialogContent>
                <DialogActions>
                    <Button onClick={() => setEditTemplateDialog({ open: false, template: null })}>
                        H·ªßy
                    </Button>
                    <Button
                        variant="contained"
                        onClick={() => {
                            setEditTemplateDialog({ open: false, template: null });
                            setMessage('M·∫´u email ƒë√£ ƒë∆∞·ª£c l∆∞u');
                        }}
                    >
                        L∆∞u
                    </Button>
                </DialogActions>
            </Dialog>
        </Box>
    );
};

export default Settings;
